package interfaceprojectdemo;

import java.awt.Color;
import static java.lang.Thread.sleep;
import javax.swing.JOptionPane;
import jssc.SerialPort;
import static jssc.SerialPort.MASK_RXCHAR;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author Ahmed El-Torky
 */
public class Application extends javax.swing.JFrame {

    private SerialPort sp;
    private boolean canWrite = false;
    private String portcData;

    /**
     * Creates new form Application
     */
    public Application() {
        initComponents();
        sp = null;
        portcData = "";
        this.refresh();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        connect = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        comms = new javax.swing.JComboBox<>();
        disconnect = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        dataSend = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        dataReceive = new javax.swing.JTextField();
        receive = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Interface Demo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        connect.setText("Connect");
        connect.setToolTipText("click to connect to the comm port");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        comms.setToolTipText("select comm port");

        disconnect.setText("Disconnect");
        disconnect.setToolTipText("click to disconnect the comm port");
        disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectActionPerformed(evt);
            }
        });

        refresh.setText("Refresh");
        refresh.setToolTipText("click to refresh the comm list");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        status.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        status.setForeground(new java.awt.Color(255, 0, 0));
        status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status.setText("Disconnected");
        status.setToolTipText("comm port status");

        dataSend.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dataSend.setText("plesae enter value from 0 to 255");

        send.setText("Send");
        send.setToolTipText("click to send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        dataReceive.setEditable(false);
        dataReceive.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        receive.setText("Receive");
        receive.setToolTipText("click to receive");
        receive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                receiveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(refresh)
                                .addGap(18, 18, 18)
                                .addComponent(connect))
                            .addComponent(comms, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(disconnect)
                            .addComponent(status)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dataSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(send))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dataReceive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(receive)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {connect, disconnect, receive, refresh, send, status});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comms, dataReceive, dataSend});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(disconnect)
                            .addComponent(connect)
                            .addComponent(refresh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dataSend, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(send))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dataReceive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(receive))
                        .addGap(0, 118, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comms, connect, dataReceive, dataSend, disconnect, receive, refresh, send, status});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        this.refresh();
    }//GEN-LAST:event_refreshActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        this.connect();
    }//GEN-LAST:event_connectActionPerformed

    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
        this.disconnect();
    }//GEN-LAST:event_disconnectActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        this.sendData();
    }//GEN-LAST:event_sendActionPerformed

    private void receiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_receiveActionPerformed
        this.readData();
    }//GEN-LAST:event_receiveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comms;
    private javax.swing.JButton connect;
    private javax.swing.JTextField dataReceive;
    private javax.swing.JTextField dataSend;
    private javax.swing.JButton disconnect;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton receive;
    private javax.swing.JButton refresh;
    private javax.swing.JButton send;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables

    private void refresh() {
        String[] portNames = SerialPortList.getPortNames();
        comms.removeAllItems();
        for (String s : portNames) {
            comms.addItem(s);
        }
    }

    private void connect() {
        if (comms.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(rootPane, "Select port first !!!");
            return;
        }
        try {
            sp = new SerialPort(comms.getSelectedItem().toString());

            if (!sp.isOpened()) {
                sp.openPort();
                sp.setParams(
                        2400,
                        SerialPort.DATABITS_8,
                        SerialPort.STOPBITS_1,
                        SerialPort.PARITY_NONE);
                sp.setEventsMask(MASK_RXCHAR);
                sp.addEventListener(new DataRxListener());
                status.setText("Connected");
                status.setForeground(Color.BLUE);
            }
        } catch (SerialPortException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
    }

    private void disconnect() {
        if (sp == null) {
            return;
        }
        if (sp.isOpened()) {
            try {
                sp.closePort();
            } catch (SerialPortException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.toString());
            }
            sp = null;
            status.setText("Disconnected");
            status.setForeground(Color.RED);
        }
    }

    private void sendData() {
        if (sp == null) {
            JOptionPane.showMessageDialog(rootPane, "connect to the port first !!!");
            return;
        }
        int number;
        try {
            number = Integer.parseInt(dataSend.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(rootPane, "Invalid number !!!\nPlease enter valid number between 0 --> 255");
            return;
        }

        if (number <= 255 && number >= 0) {

        } else {
            JOptionPane.showMessageDialog(rootPane, "Invalid number !!!\nPlease enter valid number between 0 --> 255");
            return;
        }
        try {
            String temp = "@W37";
            temp += Integer.toString((int) number) + ";";
            switch (temp.length()) {
                case 7:
                    temp += ";";
                    break;
                case 6:
                    temp += ";;";
                    break;
                default:
                    break;
            }
            while (!this.isWriteEnabled()) {
            }
            sp.writeString("@W36255;");
            canWrite = false;
            while (!this.isWriteEnabled()) {
            }
            sp.writeString(temp);
            canWrite = false;
        } catch (SerialPortException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
    }

    private void readData() {
        if (sp == null) {
            JOptionPane.showMessageDialog(rootPane, "connect to the port first !!!");
            return;
        }
        try {
            while (!this.isWriteEnabled()) {
            }
            sp.writeString("@W39000;");
            canWrite = false;
            while (!this.isWriteEnabled()) {
            }
            sp.writeString("@R38000;");
            canWrite = false;
            // wait till all value received
            while (!this.isWriteEnabled()) {
            }
            dataReceive.setText("");
            char finalResult[] = new char[3];
            int j = 0;
            char test[] = portcData.toCharArray();
            for (int d = 0; d < test.length; d++) {
                switch (test[d]) {
                    case '0':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '1':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '2':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '3':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '4':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '5':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '6':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '7':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '8':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    case '9':
                        finalResult[j] = test[d];
                        j++;
                        break;
                    default:
                        break;
                }
            }
            int x = Integer.parseInt(String.valueOf(finalResult)) - 64;
            dataReceive.setText(String.valueOf(x));
            portcData = "";
        } catch (SerialPortException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.toString());
        }
    }

    public class DataRxListener implements SerialPortEventListener {

        // concept of interrupt
        @Override
        public void serialEvent(SerialPortEvent spe) {
            String temp;
            try {
                temp = sp.readString();
                if (">".equals(temp)) {
                    canWrite = true;
                    dataReceive.setText(temp);
                } else if (temp == null) {
                    canWrite = true;
                } else if (!">".equals(temp)) {
                    portcData += temp;
                }
            } catch (SerialPortException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.toString());
            }
        }
    }

    private boolean isWriteEnabled() {
        if (!canWrite) {
            try {
                sleep(10);
            } catch (InterruptedException ex) {
                JOptionPane.showMessageDialog(rootPane, ex.toString());
            }
            return false;
        }
        return true;
    }
}
